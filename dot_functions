# -*-mode:sh-*- vim:ft=sh
# shellcheck shell=bash

# ~/.functions
# =============================================================================
# Shell functions sourced by `~/.bashrc`.

# =========================
# === General functions ===
# =========================

if ! type 'take' &> /dev/null; then
  # Creates a directory and changes to it.
  # Syntax: `take <directory>`
  take() {
    if [ -z "$1" ]; then
      echo "mkdir [-pv] [-m mode] directory ..."
      return 64
    fi

    mkdir -p -- "$@" && cd -P -- "$_" || exit;
  }
fi

# Defer initialization steps until one or more trigger commands is invoked.
#
# Given an initialization_function and a list of commands that depend on that
# initialization_function, lazy_load creates a stub for each command that runs
# the initialization_function before invoking the command. It also unloads the
# stub, so the next time the command is ran, it's ran directly.
#
# Syntax: lazy_load <initialization_function> <cmd1> [ <cmd2> [..] ]
lazy_load() {
  if [ $# -lt 2 ]; then
    echo "Usage: lazy_load <initialization_function> <cmd> [ <cmd2> [..] ]"
    return
  fi

  # name of the function that will be called to initialize the tool
  local init_func="$1"
  shift
  # one or more commands to trigger initialization of the tool
  local cmd_list=( "$@" )

  # create a stub function for each command
  for cmd in "${cmd_list[@]}"; do
    # define cmd as a function
    # shellcheck disable=SC2145,SC2294
    eval "function $cmd() {
      echo \"Lazy loading $cmd...\"
      # destroy all stub functions related to init_func
      unset -f ${cmd_list[@]}
      # run init_func
      $init_func
      # run the command this stub was wrapping
      $cmd \$@
    }"
  done
}

update_auth_sock() {
  local sock="/tmp/ssh-agent-$USER-screen"

  if test "${SSH_AUTH_SOCK}" && [ "${SSH_AUTH_SOCK}" != "${sock}" ]; then
    rm -f "${sock}"
    ln -sf "${SSH_AUTH_SOCK}" "${sock}"
    export SSH_AUTH_SOCK=$sock
  fi
}

# ==================
# === Networking ===
# ==================

# Copy the local hosts SSH public key to a remote host.
# This requires the remote host to accept access by another user, including
# root.
# Syntax: infect root@111.222.111.222
function infect() {
  # shellcheck disable=SC2029
  ssh "$@" "mkdir -p ~/.ssh; echo '$(cat ~/.ssh/id_rsa.pub)' >> ~/.ssh/authorized_keys";
}

# List programs running on a port.
# Syntax: pslisten 80
pslisten() {
  lsof -Pn -i:"$1"
}

# =============
# === Media ===
# =============

# Convert a gif to mp4.
gif2mp4() {
  ffmpeg -i "$1" -movflags faststart -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" "$2"
}

# Convert a vid to webm.A
vid2webm() {
  ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$2" "${1}.webm"
}

# ==============
# === nodenv ===
# ==============

nodenv_init() {
  if [ -n "$(command -v nodenv)" ]; then
    eval "$(nodenv init -)"
  fi
}

lazy_load nodenv_init node npm npx yarn

# =============
# === pyenv ===
# =============

pyenv_init() {
  if [ -n "$(command -v pyenv)" ]; then
    eval "$(pyenv init -)"
  fi
}

lazy_load pyenv_init python pip

# =============
# === rbenv ===
# =============

rbenv_init() {
  if [ -n "$(command -v rbenv)" ]; then
    eval "$(rbenv init -)"
  fi
}

lazy_load rbenv_init ruby
